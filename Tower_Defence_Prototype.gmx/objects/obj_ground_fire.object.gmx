<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet_fire</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//changed by tower:
max_life = 130;
life = max_life;

my_scale = 0;

my_alpha_blended = 0;
my_alpha = 0;

alpha_alarm = 20;
alarm[0] = 2;

my_rot = irandom_range(0,360);

//changed by tower:
fire_size = 1.5;

alarm[1] = 2;

fire_check_alarm = 10;
alarm[2] = fire_check_alarm;


//how long to burn the enemy:
fire_alarm_max = 120; //default value
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for enemies:

var my_radius = max( (sprite_get_width(spr_bullet_fire)*my_scale*0.9), 2);

for (enemy_pointer = 0; enemy_pointer &lt; global.map_cur_enemy; enemy_pointer++){
    //cycle through each enemy
    
    if (global.enemy_id_exists[enemy_pointer] = true){ //skip this if the object does not exist any longer. (stored in a seperate boolean array)
        
        var distance_to_pointer = distance_to_point(global.enemy_id[enemy_pointer].x, global.enemy_id[enemy_pointer].y);
        if (distance_to_pointer &lt; my_radius){ //nearest enemy
            //if within range:
            global.enemy_id[enemy_pointer].fire_alarm_max = fire_alarm_max;
            global.enemy_id[enemy_pointer].fire_alarm = fire_alarm_max; //give the enemy the alarm amount (depending on it's upgrade)
            if (global.enemy_id[enemy_pointer].alarm[7] == -1) global.enemy_id[enemy_pointer].alarm[7] = 20; //immediate burning (reset if -1)
            
            //stored so that the larger the fire, the bigger damage
            global.enemy_id[enemy_pointer].fire_size = fire_size;
        }
    }
}


alarm[2] = fire_check_alarm;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_smoke = instance_create(x,y-8,obj_smoke);
my_smoke.my_scale = max(my_scale*6, 4); 

var deviance = (choose(1.25,1,0.75,0.5));

my_smoke.max_life = (life*1.5)*deviance;
my_smoke.my_max_life = my_smoke.max_life/deviance;
my_smoke.life = my_smoke.my_max_life;

my_smoke.life_perc = my_smoke.life/my_smoke.my_max_life;

my_smoke.alarm[0] = my_smoke.leave_trails;

alarm[1] = irandom_range(8,20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var life_perc = life/max_life;

//flickers
my_alpha = max( (life_perc + choose(-0.4,-0.3,-0.2,-0.1,0,0.1,0.2,0.3,0.4) ), 0.1);

//flickers at random times
alarm[0] = alpha_alarm*(choose(-2.5,-1.5,-1,1,1.5,2.5));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.freeze) {

    life--;
    
    if (life &lt;= 0) instance_destroy();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.25;

var life_perc = life/max_life;

//flare up the sprite
if (life_perc &gt; 0.5) my_scale = ease(my_scale, fire_size + (1 - life_perc), 0.1);
if (life_perc &lt;= 0.5) my_scale = ease(my_scale, life_perc, 0.05);

my_alpha_blended = ease(my_alpha_blended, my_alpha, 0.1);

draw_set_blend_mode( bm_add );
draw_sprite_ext(spr_bullet_fire, image_index, x,y,my_scale, my_scale, my_rot, c_white, my_alpha_blended);
draw_set_blend_mode( bm_normal );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
