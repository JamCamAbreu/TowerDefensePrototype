<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tower_normal_UI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>obj_clickable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cur_alpha = con_UI.cur_alpha - 0.2;
touched = false;

my_tower_cost = 0; //later changed in con_UI's create event

purchase_description_created = false;

merge_amount = 0.5;

can_buy_color = merge_colour(c_dkgray, c_lime, merge_amount);
cannot_buy_color = merge_colour(c_dkgray, c_red, merge_amount);

rectangle_color = cannot_buy_color;
current_rectangle_color = rectangle_color;
blend_color = 0;
highlight = cur_alpha;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



//draw the appropriate color based on "can purchase" or "not"
if (global.gold &gt;= my_tower_cost) {
    can_buy = true;
}
else can_buy = false;


var my_sprite;

switch (tower_type){
    case tower_normal:
        my_sprite = asset_get_index(sprite_get_name(spr_tower_normal_UI));
        my_button_y1 = con_UI.bar_purchase_button0_y1;
        my_button_y2 = con_UI.bar_purchase_button0_y2;
        my_title = "Expansion";
        
        break;

    case tower_rock:
        my_sprite = asset_get_index(sprite_get_name(spr_tower_rock_UI));
        my_button_y1 = con_UI.bar_purchase_button1_y1;
        my_button_y2 = con_UI.bar_purchase_button1_y2;
        my_title = "Rock Catapult";
        break;

    case tower_oil:
        my_sprite = asset_get_index(sprite_get_name(spr_tower_oil_UI));
        my_button_y1 = con_UI.bar_purchase_button2_y1;
        my_button_y2 = con_UI.bar_purchase_button2_y2;
        my_title = "Oil and Flame";
        break;        
        
    case tower_hut:
        my_sprite = asset_get_index(sprite_get_name(spr_hut_UI));
        my_button_y1 = con_UI.bar_purchase_button3_y1;
        my_button_y2 = con_UI.bar_purchase_button3_y2;
        my_title = "Barracks";
        break;     
}


if (collision_rectangle( con_UI.bar_purchase_x1, my_button_y1, con_UI.bar_purchase_x2, my_button_y2, obj_mouse_tip, true, false )) {
    cur_alpha = ease(cur_alpha, 1, 0.1);
    touched = true;
    merge_amount = ease(merge_amount, 0.6, 0.1);
    
    
    
    //purchasing towers from the purchase bar:---------------------------------------------------------------
    if ((mouse_check_button_pressed(mb_left)) &amp;&amp; (global.gold &gt;= my_tower_cost) ) {        
        con_room.place_tower = true;
        con_room.place_tower_type = tower_type;
        global.current_tower_cost = my_tower_cost;
        con_room.draw_place_tower_arrow = true;
    }
    
    if (mouse_check_button(mb_left))
        merge_amount = ease(merge_amount, 0.75, 0.1);
    
}

else {
    cur_alpha = ease(cur_alpha, min(con_UI.cur_alpha + 0.4,0.6), 0.1);
    touched = false;
    merge_amount = ease(merge_amount, 0.3, 0.1);
    
    //purchase description
    if (purchase_description_created) {
        with (my_purchase_description) instance_destroy();
        purchase_description_created = false;
    }
}


//highlights the text/image if able to purchase:
if (can_buy)
    highlight = ease(highlight, 1, 0.01);
else 
    highlight = ease(highlight, cur_alpha, 0.01);



//color for purchase:
can_buy_color = merge_colour(c_dkgray, c_lime, merge_amount);
cannot_buy_color = merge_colour(c_dkgray, c_red, merge_amount);


if (can_buy) {
    rectangle_color = can_buy_color;
    blend_color = ease(blend_color, 1, 0.01);
}
else {
    rectangle_color = cannot_buy_color;
    blend_color = ease(blend_color, 0, 0.01);
}   

current_rectangle_color = merge_colour(current_rectangle_color, rectangle_color, blend_color);

    
//draw the button, and draw the sprite:    
draw_set_alpha(cur_alpha);
draw_rectangle_colour( con_UI.bar_purchase_x1, my_button_y1, con_UI.bar_purchase_x2, my_button_y2, current_rectangle_color, current_rectangle_color, current_rectangle_color, current_rectangle_color,   false);
draw_sprite_ext(my_sprite, image_index, x - 6, y - 8, 0.5, 0.5, 0, c_white, highlight );



if (touched) {
    draw_sprite(spr_purchase, image_index, obj_mouse_tip.x, obj_mouse_tip.y - 8);
}


//draw the description of each tower on mouseover:

if (touched) &amp;&amp; (!purchase_description_created){

        //draw the info box above the mouse--------------------------

        var title_string;
        var cost;
        var damage;
        var rate_of_fire;
        var tower_range;
        var description;
        
        var draw_purchase_description_width = 64*8;
        
    switch (tower_type){
        
            case tower_normal: 
                title_string = "Expansion Tower";
                cost = "Stone Required: " + string(my_tower_cost);
                damage = "Starting Damage: " + string(con_room.tower_normal_start_damage);
                rate_of_fire = "Rate of Fire: " + string(con_room.tower_normal_start_speed/60) + " seconds between shots";
                tower_range = "Starting Range: " + string(tower_start_range);
                
                description = "Abilities: Expansion Towers are unique in that their starting damage, range, and rate of fire can all be upgraded to make a more powerful tower.";
                break;
                
            case tower_rock: 
                title_string = "Rock Catapult";
                cost = "Stone Required: " + string(my_tower_cost);
                damage = "Damage: " + string(con_room.tower_normal_start_damage) + " (+ impact damage)";
                rate_of_fire = "Rate of Fire: " + string(con_room.tower_normal_start_speed/60) + " seconds between shots";
                tower_range = "Range: " + string(tower_rock_start_range);
                
                description = "Abilities: Rock Catapults sling various size rocks at the enemy. Rocks damage in an area around impact, and also have a 50% chance to stun the enemy.";
                break;
                
            case tower_oil: 
                title_string = "Oil and Flame";
                cost = "Stone Required: " + string(my_tower_cost);
                damage = "Damage: " + string(con_room.tower_oil_start_damage);
                rate_of_fire = "Rate of Fire: " + string(con_room.tower_oil_start_speed/60) + " seconds between shots";
                tower_range = "Range: " + string(tower_oil_start_range);
                
                description = "Abilities: Oil and Flame towers burn any enemies that come to close. Enemies stay burning for a period of time (starting at " + string(con_room.tower_oil_start_burn_duration/60) +  " seconds), taking damage while burning.";
                break;
                
            case tower_hut: 
                title_string = "Barracks";
                cost = "Stone Required: " + string(my_tower_cost);
                damage = "Starting Unit Damage: NA";
                rate_of_fire = "Rate of Fire: NA";
                tower_range = "Starting Range: NA";
                
                description = "Abilities: Must be placed next to a road. Militia units are sent out to counter-attack incoming waves of enemies.";
                break;

    }
    
    //store in obj_upgrade_description because the depth is too low in this object 
    
    my_purchase_description = instance_create(x - 128,y - 64,obj_purchase_description);
    
    my_purchase_description.title_string = title_string;
    my_purchase_description.cost = cost;
    my_purchase_description.damage = damage;
    my_purchase_description.rate_of_fire = rate_of_fire;
    my_purchase_description.tower_range = tower_range;
    
    my_purchase_description.description = description;
    
    my_purchase_description.draw_purchase_description_width = draw_purchase_description_width;
    
    my_purchase_description.can_calculate_lines = true; //go ahead and run the script now
    
    my_purchase_description.can_draw = true; //used to avoid variable initialization errors
    purchase_description_created = true; //used to negate creating more of these objects
}




draw_set_font(ft_gold_small);
draw_text_color(x - 12 + 1,y, string(my_tower_cost) , c_black, c_black, c_black, c_black, cur_alpha);
draw_text_color(x - 12,y + 2, + string(my_tower_cost) , c_ltgray, c_ltgray, c_ltgray, c_ltgray, highlight);


draw_text_color(x + 2,y - 12 + 2, "      " + string(my_title) , c_black, c_black, c_black, c_black, 1);
draw_text_color(x ,y - 12 , "      " + string(my_title) , c_orange, c_orange, c_orange, c_orange,  highlight);



draw_set_font(ft_UI);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
