<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-400</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_draw = false;
can_calculate_lines = false;

starting_x = x;
starting_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_font(ft_UI);

if (can_calculate_lines) {
    //break the long description variable into multiple lines if nessisary:
    s_how_many_lines(description, ft_UI, draw_purchase_description_width - 32, id);
    can_calculate_lines = false; //used to only run once
}


if (can_draw) {    

            
    var draw_box_padding = 16;
    var draw_box_height = draw_box_padding*4 + string_height(title_string) + string_height(cost) + string_height(damage) + string_height(rate_of_fire) + string_height(tower_range) + line_height*how_many_lines;

    //make an exception if near the right of the screen:
    var box_length = starting_x + draw_purchase_description_width + draw_box_padding*4;
    if (box_length &gt; room_width)
        draw_x = starting_x - (box_length - room_width);
    else draw_x = starting_x
    
    //make an exception if near the top of the screen:
    if (starting_y - draw_box_height &lt; 0) 
        draw_box_height = starting_y;
    
    //draw the box:
    
    draw_set_color(c_black);
    var y_total = starting_y - draw_box_height + line_height*6 + line_height*(how_many_lines + 1)
    draw_rectangle(draw_x, starting_y - draw_box_height, starting_x + draw_purchase_description_width + draw_box_padding*4, y_total, false);
    
    //text inside the box:
    draw_set_color(c_white);
    
    
    //title
    draw_set_font(ft_UI_bold);
    draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + draw_box_padding + line_height*0, title_string);
    
    //cost
    draw_set_font(ft_UI);
    draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + draw_box_padding + line_height*1, cost);
    
    //damage
    draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + draw_box_padding + line_height*2, damage);
    
    //rate of fire
    draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + draw_box_padding + line_height*3, rate_of_fire);
    
    //range
    draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + draw_box_padding + line_height*4, tower_range);
    
    //description
    
    //draw the description
    for (i = 0; i &lt; how_many_lines; i++){
        draw_text(draw_x + draw_box_padding, starting_y - draw_box_height + line_height*6 + line_height*i, line[i]);
    }

}

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
