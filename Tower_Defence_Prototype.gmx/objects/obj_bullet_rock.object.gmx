<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_rot = 0;

global.missiles_on_screen++;

last_known_x = 0;
last_known_y = 0;

//for area of effect damage, see step event
explode_radius = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.missiles_on_screen--;
my_rock_explosion = instance_create(x,y,obj_rock_explode);
my_rock_explosion.target_radius = explode_radius;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.freeze) {
    
    if (my_rot &lt; 360) my_rot++;
    else my_rot = 0;
    
    if (global.enemy_id_exists[enemy_pointer]) {
        last_known_x = missile_target.x;
        last_known_y = missile_target.y;
        move_towards_point(last_known_x, last_known_y, missile_speed);
        
    }
    
    else {
        move_towards_point(last_known_x, last_known_y, missile_speed);
        if (distance_to_point( last_known_x, last_known_y) &lt; 16) {
            //area of effect damage:
            //Enemy Cycling:
            for (enemy_pointer = 0; enemy_pointer &lt; global.map_cur_enemy; enemy_pointer++){
                //cycle through each enemy
                
                if (global.enemy_id_exists[enemy_pointer] = true){ //skip this if the object does not exist any longer. (stored in a seperate boolean array)
                    
                    var distance_to_pointer = distance_to_point(global.enemy_id[enemy_pointer].x, global.enemy_id[enemy_pointer].y);
                    if (distance_to_pointer &lt; explode_radius){ //nearest enemy
                        //if within range:
                        global.enemy_id[enemy_pointer].my_health -= max(missile_damage - global.enemy_id[enemy_pointer].armor, 5); 
                        global.enemy_id[enemy_pointer].stun_duration = stun_duration;
                        global.enemy_id[enemy_pointer].alarm[5] = stun_duration;
                        // using global.enemy_id[enemy_pointer].x, global.enemy_id[enemy_pointer].y
                    }
                }
            }
        
        instance_destroy();
        }
    }
    
    if (collision_point( x, y, missile_target, true, true)) {
        
    
        //area of effect damage:
        //Enemy Cycling:
        for (enemy_pointer = 0; enemy_pointer &lt; global.map_cur_enemy; enemy_pointer++){
            //cycle through each enemy
            
            if (global.enemy_id_exists[enemy_pointer] = true){ //skip this if the object does not exist any longer. (stored in a seperate boolean array)
                
                var distance_to_pointer = distance_to_point(global.enemy_id[enemy_pointer].x, global.enemy_id[enemy_pointer].y);
                if (distance_to_pointer &lt; explode_radius){ //nearest enemy
                    //if within range:
                    global.enemy_id[enemy_pointer].my_health -= max(missile_damage - global.enemy_id[enemy_pointer].armor, 5);
                    global.enemy_id[enemy_pointer].stun_duration = stun_duration;
                    global.enemy_id[enemy_pointer].alarm[5] = stun_duration;
                    //if desired: create a damage indicator at the enemy location 
                    // using global.enemy_id[enemy_pointer].x, global.enemy_id[enemy_pointer].y
                }
            }
        }
    
        instance_destroy();
    }
 
    
       
} else speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_rock, image_index, x,y,my_scale,my_scale,my_rot, c_white, 1);
//var show_dist = distance_to_point(last_known_x, last_known_y);

//draw_text(x, y - 16, "dist: " + string(show_dist) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
