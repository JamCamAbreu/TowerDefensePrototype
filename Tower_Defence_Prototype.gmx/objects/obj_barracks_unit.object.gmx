<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = col_check; //this alarm is the collision checking alarm. 

max_health = 100;
my_health = max_health

starting_position_x = x;
starting_position_y = y;

my_damage = 10; //damaqe towards enemy units/tower.

my_path = instance_create(x,y, obj_pathfind);

looking_for_fight = true;
fighting = false;

my_move_speed = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (fighting &amp;&amp; (instance_exists(my_enemy_target)) ) {
    my_enemy_target.looking_for_fight = true;
    my_enemy_target.fighting = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = col_check + 6; //slightly slower than the enemy

if (!global.freeze) {

    var rand_main = move_speed + choose(-2,-1,0,2,) //variance on movement
    var rand_minor = choose(-2,-1,0,2,) //minor variance on movement
    
    if (looking_for_fight &amp;&amp; !fighting){
        if (place_meeting(my_path.x, my_path.y, obj_enemy)) {
            check_enemy_target = instance_place(my_path.x, my_path.y, obj_enemy)
            
            
            if (check_enemy_target.looking_for_fight) {
                my_enemy_target = check_enemy_target;
                
                //set variables in my enemy
                my_enemy_target.looking_for_fight = false;
                my_enemy_target.fighting = true;
                my_enemy_target.my_hero_target = id;
                
                //set variables in myself
                looking_for_fight = false;
                fighting = true;
                damage_to_me = my_enemy_target.my_damage;
            }
        }
    }
    
    
    if (!looking_for_fight &amp;&amp; fighting &amp;&amp; (instance_exists(my_enemy_target)) ) {
        my_health -= damage_to_me;
        my_enemy_target.my_health -= my_damage;
    }
    
    
    if (!fighting &amp;&amp; looking_for_fight) {
    
        //if the pathfind gets too far:
        if ( (distance_to_point(my_path.x, my_path.y)) &gt; move_speed*2){
            my_path.x = x;
            my_path.y = y;
        }
        
        //Path finding
        //these are reversed for hero units!!
        if (place_meeting(x, y, obj_tile_right)) {    
            my_path.x -= rand_main;
            my_path.y -= rand_minor;
        }
        
        else if (place_meeting(x, y, obj_tile_down)) {
            my_path.y -= rand_main;
            my_path.x -= rand_minor; 
        }
        
        else if (place_meeting(x, y, obj_tile_left)) {
            my_path.x += rand_main;
            my_path.y -= rand_minor;
        }
        
        else if (place_meeting(x, y, obj_tile_up)) {
            my_path.y += rand_main;
            my_path.x -= rand_minor;
        }
        
        //corners 
        
        
        else if (place_meeting(x, y, obj_tile_leftdown)) || (place_meeting(x, y, obj_tile_leftup)) {
            my_path.y += rand_minor;
            my_path.x += rand_main;
        }
        
        //move left
        else if (place_meeting(x, y, obj_tile_rightdown)) || (place_meeting(x, y, obj_tile_rightup)) {
            my_path.y += rand_minor;
            my_path.x -= rand_main; 
        }
        
        //move right
        else if (place_meeting(x, y, obj_tile_downright)) || (place_meeting(x, y, obj_tile_downleft)) {
            my_path.y -= rand_main;
            my_path.x -= rand_minor;
        }
        
        //move up
        else if (place_meeting(x, y, obj_tile_upright)) || (place_meeting(x, y, obj_tile_upleft)) {
            my_path.y += rand_main;
            my_path.x -= rand_minor;
        }
    
    }


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.freeze) {

    //destroy all enemies on screen. Testing purposes. 
    //if (keyboard_check_pressed(vk_space)) instance_destroy();
    
    if (my_health &lt;= 0) {
        //killed_by_tower = true;
        instance_destroy();
    }
    
    x = ease(x, my_path.x, my_move_speed);
    y = ease(y, my_path.y, my_move_speed);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var health_perc = my_health/max_health; //our percentage of health used for scaling


var healthbar_size_x = 48; //actual width of the health bar. 
var healthbar_scale = round(healthbar_size_x*health_perc); //scales the bar to the correct size

var healthbar_size_y = 12; //actual height of the health bar
var healthbar_center = x - (healthbar_size_x/2); //center the bar above the monsters head

var above_head = 20;

//my health bar

//red
draw_set_alpha(0.3);
draw_rectangle_colour(healthbar_center, y - above_head, healthbar_center + healthbar_size_x, y - above_head - healthbar_size_y, c_red, c_red, c_red, c_red, false);

//green
draw_set_alpha(0.5);
draw_rectangle_colour(healthbar_center, y - above_head, healthbar_center + healthbar_scale, y - above_head - healthbar_size_y, c_green, c_green, c_green, c_green, false);

//outline
draw_set_alpha(1);
draw_rectangle(healthbar_center, y - above_head, healthbar_center + healthbar_size_x, y - above_head - healthbar_size_y, true); // outline

/*
if (fighting) {
    draw_set_alpha(0.8);
    draw_line_width_colour(x,y,my_enemy_target.x,my_enemy_target.y,2,c_red, c_red);
}
*/

//reset
draw_set_alpha(1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
