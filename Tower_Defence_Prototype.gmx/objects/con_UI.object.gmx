<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_upgrade_canbuy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-25</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//alarm that checks to see how much gold we've gained, if a lot quickly, sparkle up the screen in excitement
gold_last_check = 0;
alarm[0] = 15;
draw_gold_praise = false;
fade_praise_string = 0;
draw_gold_praise_alpha_set = 0;


//allows gold to slowly incrament up using ease function (check draw event)
target_gold_amount = 0;


pause_timer_start_time = 0;
pause_timer_end_time = 0;
set_pause_timer = true;
end_pause_timer = false;
global.paused_time_total = 0; //stores the TOTAL amount of time that we have paused. 
global.level_begin_timer = get_timer()/1000000; //stores the total amount of time that has passed from start to end of level. 
global.level_end_timer = 0; //later changed in the obj waves controller step event
global.paused_time_total = 0;


global.draw_paused_string = false;


countdown_alpha = 0;
countdown_check_alpha = 0;
countdown_color = c_yellow;

upgrade_description_created = false;

global.sell_tower_collide = false;


global.time_sec = 0;

starting_depth = depth;

//fading:
cur_alpha = 0.7;
cur_alpha2 = 0;

square_unit = 32;

//bar outer
bar_outer_x1 = room_width - square_unit*8;
global.bar_outer_x1 = bar_outer_x1;
bar_outer_x2 = room_width;
bar_outer_y1 = 0;
bar_outer_y2 = room_height;

//bars inner
bar_inner_x1 = bar_outer_x1 + square_unit/2; //used for all inside
bar_inner_x2 = room_width - square_unit/2;

//indents for text
bar_indent0 = bar_inner_x1 + square_unit/4;
bar_indent1 = bar_inner_x1 + square_unit/2; 
bar_indent2 = bar_inner_x1 + square_unit*0.75;
bar_indent3 = bar_inner_x1 + square_unit;

//bar title
bar_title_y1 = square_unit/2;
bar_title_y2 = bar_title_y1 + square_unit*5;

//bar towerinfo
bar_towerinfo_y1 = bar_title_y2 + square_unit; 
bar_towerinfo_y2 = bar_towerinfo_y1 + square_unit*8;



//bar purchase tower
bar_purchase_tower_y1 = bar_towerinfo_y2 + square_unit; 
bar_purchase_tower_y2 = bar_purchase_tower_y1 + square_unit*8; 

var amount_of_buttons = 4;

var button_padding = square_unit/4;
var button_height = (bar_purchase_tower_y2 - bar_purchase_tower_y1)/amount_of_buttons - button_padding*1.25;

bar_purchase_x1 = bar_indent0;
bar_purchase_x2 = bar_inner_x2 - square_unit/4;

//button0
bar_purchase_button0_y1 = bar_purchase_tower_y1 + button_padding;
bar_purchase_button0_y2 = bar_purchase_button0_y1 + button_height;

//button1
bar_purchase_button1_y1 = bar_purchase_button0_y2 + button_padding;
bar_purchase_button1_y2 = bar_purchase_button1_y1 + button_height;

//button2
bar_purchase_button2_y1 = bar_purchase_button1_y2 + button_padding;
bar_purchase_button2_y2 = bar_purchase_button2_y1 + button_height;

//button_3
bar_purchase_button3_y1 = bar_purchase_button2_y2 + button_padding;
bar_purchase_button3_y2 = bar_purchase_button3_y1 + button_height;


    //tower buttons
    purchase_0 = instance_create(bar_indent3, bar_purchase_tower_y1 + square_unit*1, UI_tower);//later change UI_tower to UI_tower_red
    purchase_0.tower_type = tower_normal;
    purchase_0.my_tower_cost = 50;
    purchase_0.sell_amount = purchase_0.my_tower_cost*0.75
    
    //rock tower
    purchase_1 = instance_create(bar_indent3, bar_purchase_tower_y1 + square_unit*3, UI_tower); //later change UI_tower to UI_tower_blue
    purchase_1.tower_type = tower_rock;
    purchase_1.my_tower_cost = 100;
    purchase_1.sell_amount = purchase_1.my_tower_cost*0.75
    
    purchase_2 = instance_create(bar_indent3, bar_purchase_tower_y1 + square_unit*5, UI_tower);//later change UI_tower to UI_tower_green
    purchase_2.tower_type = tower_oil;
    purchase_2.my_tower_cost = 240;
    purchase_2.sell_amount = purchase_2.my_tower_cost*0.75
    
    purchase_3 = instance_create(bar_indent3, bar_purchase_tower_y1 + square_unit*7, UI_tower);//later change UI_tower to UI_tower_green
    purchase_3.tower_type = tower_hut;
    purchase_3.my_tower_cost = 2500;
    purchase_3.sell_amount = purchase_3.my_tower_cost*0.75
    

first_selected_tower = false;
after_sell = false;

cur_upgrade = 0; //later holds the identity of an upgrade we are clicking. 
create_obj_buy = false;
my_obj_buy_destroy = false;
my_obj_buy = 0; //later holds the identity of our cursor to be drawn

draw_speed_buttons = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_gold_praise = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_gold_praise_alpha_set = 0;

alarm[2] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (target_gold_amount &gt; (gold_last_check + 100*(global.wave*0.075)) ) {

    draw_gold_praise = true;
    draw_gold_praise_alpha_set = 1;
    alarm[1] = 60*1.5;
    
}


gold_last_check = target_gold_amount;

alarm[0] = 35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    



cur_alpha = cursor_fade(bar_outer_x1, bar_outer_y1, bar_outer_x2, bar_outer_y2, cur_alpha, 1, 0.5, 0.05);

var bar_color = make_color_hsv(0,240,57);
var bar_color2 = make_color_hsv(0,240,37);


//Outer bar
//draw_rectangle_color(bar_outer_x1, bar_outer_y1, bar_outer_x2, bar_outer_y2, bar_color2, c_black, bar_color, c_black, false);


draw_set_alpha(cur_alpha);
//bar title----------------------------------------------------------------------------------------------------
draw_rectangle_colour(bar_inner_x1, bar_title_y1, bar_inner_x2, bar_title_y2, bar_color2, c_black, c_black, c_black, false);
draw_set_color(c_white);
draw_set_font(ft_UI_title);
draw_text(bar_indent0, bar_title_y1 + square_unit*.25, "TOWER DEFENSE"); 
draw_set_font(ft_UI_small);
draw_text(bar_indent2, bar_title_y1 + square_unit/2 + square_unit*0.5, "   by Cam Abreu"); 

draw_set_font(ft_UI);
draw_text(bar_indent0, bar_title_y1 + square_unit*1.75, "Wave: " + string(global.wave));

draw_set_font(ft_UI_small);
draw_text(bar_indent0, bar_title_y1 + square_unit*3, "Enemies Defeated: " + string(global.enemies_killed));
//draw_text(bar_indent0, bar_title_y1 + square_unit*3.25, "  Defeated: " + string(global.enemies_killed));
draw_set_font(ft_UI);



//first set the time when pausing began
if (global.freeze &amp;&amp; set_pause_timer) {

    pause_timer_start_time = get_timer()/1000000;
    end_pause_timer = true;
    set_pause_timer = false;
}

//when unpaused, set our total paused time to equal the total amount of time that we paused
if (!global.freeze &amp;&amp; end_pause_timer) {
    var pause_timer_end_time = get_timer()/1000000;
    
    global.paused_time_total += pause_timer_end_time - pause_timer_start_time;
    end_pause_timer = false;
    set_pause_timer = true; //allows us to repeate the above code
}


//I need to subtract time that occured when paused:
if (!global.freeze) {
    //timer
    time_micro = get_timer();
    global.time_sec = (time_micro/1000000) - global.level_begin_timer - global.paused_time_total; //minus time that was paused and the time from start of level
     
        //timer adds gold is in another event (step of main?)
    time_min = round(global.time_sec/60);
    time_sec = round(global.time_sec mod 60);
}

draw_text(bar_indent0, bar_title_y1 + square_unit*4, string(time_min) + " min, " + string(time_sec) + " sec");



//bar towerinfo-----------------------------------------------------------------------------------------
if (first_selected_tower) draw_set_alpha(cur_alpha2);
else {
    ease(cur_alpha2, cur_alpha, 0.8)
    draw_set_alpha(max(cur_alpha,cur_alpha2) );
}

draw_rectangle_colour(bar_inner_x1, bar_towerinfo_y1, bar_inner_x2, bar_towerinfo_y2, bar_color2, c_black, c_black, c_black, false);

//display name
draw_set_font(ft_UI_title);
draw_text(bar_indent0, bar_towerinfo_y1 + square_unit/2, "Current Tower:");



    
//only display if we have a tower selected. 
if (first_selected_tower) { 

    cur_alpha2 = ease(cur_alpha2, cur_alpha + 0.4, 0.1);
    draw_set_alpha(cur_alpha2);
    
    draw_set_font(ft_UI);
    
    //displaytower nickname
    draw_text_color(bar_indent0, bar_towerinfo_y1 + square_unit*1.25, "  " + string(global.selected_tower_nickname) , c_orange, c_orange, c_orange, c_orange, cur_alpha2 );
    
    //display tower type
    var type_string = "Type: " + string(global.selected_tower_name);
    
    draw_text(bar_indent0, bar_towerinfo_y1 + square_unit*2.5, "Type: ");
    var type_string_width = string_width("Type: ");
    
    if (bar_indent0 + string_width(type_string) &gt;= bar_inner_x2)
        draw_set_font(ft_UI_small);
    else
        draw_set_font(ft_UI);
    
    draw_text(bar_indent0 + type_string_width, bar_towerinfo_y1 + square_unit*2.5, string(global.selected_tower_name));

    draw_set_font(ft_UI);
    //display damage
    draw_text(bar_indent0, bar_towerinfo_y1 + square_unit*3.5, "Damage: " + string(global.selected_tower_damage));
    
    //display Rate of Fire
    
    var shots_per_second = 1/(global.selected_tower_rate_of_fire/60);
    var shots_per_second_string = "Rate: " + string(shots_per_second);
    var shots_per_second_string_width = string_width(shots_per_second_string);
    draw_text(bar_indent0, bar_towerinfo_y1 + square_unit*4.5, shots_per_second_string );
    
    
    draw_set_font(ft_UI_small);
    draw_text(bar_indent0 + shots_per_second_string_width, bar_towerinfo_y1 + square_unit*4.5,  + " shot/sec");
    
    
    draw_set_font(ft_UI);
    //display range
    draw_text(bar_indent0, bar_towerinfo_y1 + square_unit*5.5, "Range: " + string(global.selected_tower_range) + " feet");
        
    
    
    
    
    
    
    //unless the screen is frozen:
    if (!global.freeze) {
        
        //sell?
        var mystring = "Sell Val: $" + string(global.selected_tower_sell_amount)
        draw_text(bar_indent0, bar_towerinfo_y1 + square_unit*6.5, mystring);
        var sell_tower_id; //used below for the instance create ID.
        var bag_x = bar_indent0 + string_width(mystring) + square_unit;
        var bag_y = bar_towerinfo_y1 + square_unit*6.75;
        
        if (create_sell_icon) {
            sell_tower_id = instance_create(bag_x, bag_y, obj_sell_tower);
            create_sell_icon = false;   
        }
        
        with (obj_sell_tower){
            if (place_meeting(x, y, obj_mouse_tip)){
                global.sell_tower_collide = true;
                if (mouse_check_button(mb_left)) obj_sell_tower.my_color = c_lime;
                else obj_sell_tower.my_color = c_green;
                
                //logic for selling the tower:
                if (mouse_check_button_released(mb_left)) {
                    con_UI.after_sell = true;
                    instance_destroy();
                    con_UI.first_selected_tower = false;
                }
            }
            
            else {
                obj_sell_tower.my_color = c_white;
                global.sell_tower_collide = false;
            }
        }
        
        //after releasing the mouse button and control has returned to con_UI:
        if (after_sell){
            var gold_bag = instance_create(global.selected_tower_id.x, global.selected_tower_id.y, obj_goldfind);
            gold_bag.gold_amount = global.selected_tower_sell_amount;
            global.gold += global.selected_tower_sell_amount;
    
            //delete all obj_upgrades:
            with (global.selected_tower_id) {
            
                switch (tower_type) {
                
                    case tower_normal:
                        with (my_damage_upgrade) instance_destroy();
                        with (my_range_upgrade) instance_destroy();
                        with (my_speed_upgrade) instance_destroy();
                        break;
                        
                    case tower_rock:
                        with (my_rock_min_upgrade) instance_destroy();
                        with (my_rock_max_upgrade) instance_destroy();
                        break;
                        
                    case tower_oil:
                        with (my_oil_upgrade) instance_destroy();
                        with (my_fire_upgrade) instance_destroy();
                        break;
                }
                display_upgrades = false;
                with (my_built_string) instance_destroy();
                with (my_tower_spot) instance_destroy();
            }
    
            //delete tower here!
            with (global.selected_tower_id) instance_destroy();
            after_sell = false;
        }
           
                                        //see below
        if (first_selected_tower) &amp;&amp; (!global.hover_over_upgrade) &amp;&amp; (!global.sell_tower_collide){ 
            //clicking anything else will cancel the current 
            with (obj_clickable){
                if (!place_meeting(x, y, obj_mouse_tip)){
                
                    if (mouse_check_button_pressed(mb_left)) {
                        with (obj_sell_tower) instance_destroy(); //DON'T FORGET TO DESTROY THE SELL TOWER BUTTON!
    
                        
                        
                        //delete all obj_upgrades:
                        with (global.selected_tower_id) {
                        
                            switch (tower_type) {
                            
                                case tower_normal:
                                    with (my_damage_upgrade) instance_destroy();
                                    with (my_range_upgrade) instance_destroy();
                                    with (my_speed_upgrade) instance_destroy();
                                    break;
                                    
                                case tower_rock:
                                    with (my_rock_min_upgrade) instance_destroy();
                                    with (my_rock_max_upgrade) instance_destroy();
                                    break;
                                    
                                case tower_oil:
                                    with (my_oil_upgrade) instance_destroy();
                                    with (my_fire_upgrade) instance_destroy();
                                    break;
                            }
                            display_upgrades = false;
                        }
                        con_UI.first_selected_tower = false;
                        
                        
                    }
                }
            }
        }
        
        //make the upgrade the highest priority
        with (obj_mouse_tip) {
                if (place_meeting(x,y,obj_upgrade_mask)){ 
                    global.hover_over_upgrade = true;
                } else global.hover_over_upgrade = false;
        }
        
        
        
        //make upgrades to the current tower-------------------------------------------------------------
        if (global.hover_over_upgrade) {
            
        
            //store the upgrade masks pointer into variable cur_upgrade:
            with (obj_mouse_tip) {
                var cur_upgrade = instance_place(x, y, obj_upgrade_mask);
                con_UI.cur_upgrade = cur_upgrade;
            }
            
            
            //draw the info box above the mouse--------------------------
            var my_upgrade_object = cur_upgrade.my_upgrade_id
    
            var title_string;
            var cur_level_string;
            var next_level_string;
            var description;
            
            var draw_upgrade_description_width = 64*6;
            
        switch (my_upgrade_object.upgrade_type) {
            
                case feather: 
                    title_string = "Rate of Fire";
                    var shots_per_second = 1/(global.selected_tower_id.rate_of_fire/60);
                    var new_shots_per_second = 1/( (global.selected_tower_id.rate_of_fire - cur_upgrade.upgrade_amount)/60);
                    cur_level_string = "Current Rate: " + string(shots_per_second) + " shots/sec";
                    next_level_string = "Next Level: " + string(new_shots_per_second) + " shots/sec";
                    description = "Description: Increases the frequency in which the tower fires projectiles.";
                    break;
                    
                case longbow: 
                    title_string = "Range"
                    cur_level_string = "Current Range: " + string(global.selected_tower_id.tower_cur_range) + " feet";
                    next_level_string = "Next Level: " + string(global.selected_tower_id.tower_cur_range + cur_upgrade.upgrade_amount) + " feet";
                    description = "Description: Increases the range of the tower.";
                    break;
                    
                case swords: 
                    title_string = "Damage"
                    cur_level_string = "Current Damage: " + string(global.selected_tower_id.tower_damage);
                    next_level_string = "Next Level: " + string(global.selected_tower_id.tower_damage + cur_upgrade.upgrade_amount);
                    description = "Description: Increases the damage of each projectile.";
                    break;
                    
                case oil:
                    title_string = "More Oil"
                    cur_level_string = "Current Duration: " + string( round(global.selected_tower_id.oil_duration/60) ) + " seconds";
                    next_level_string = "Next Level: " + string(  round( (global.selected_tower_id.oil_duration + cur_upgrade.upgrade_amount)/60)  ) + " seconds";
                    description = "Description: Increases the amount of oil per projectile, adding damage and a longer burn.";
                    break;
                    
                case fire_upgrade:
                    title_string = "Fire Size"
                    cur_level_string = "Current Size: " + string(global.selected_tower_id.fire_size);
                    next_level_string = "Next Level: " + string(global.selected_tower_id.fire_size + cur_upgrade.upgrade_amount);
                    description = "Description: Increases the size of the explosion, causing more enemies to be caught in the fire, and slightly more damage."; 
                    break;
                    
                case rock_min_upgrade:
                    title_string = "Minimum Rock Size";
                    cur_level_string = "Current Minimum Size: " + string(global.selected_tower_id.explode_radius_min) + " ft. impact";
                    next_level_string = "Next Level: " + string(global.selected_tower_id.explode_radius_min + cur_upgrade.upgrade_amount) + " ft. impact";
                    description = "Description: Increases the minimum size of rocks that are thrown. Larger rocks deal more damage and stun for longer."; 
                    break;
                    
                case rock_max_upgrade:
                    title_string = "Maximum Rock Size";
                    cur_level_string = "Current Maximum Size: " + string(global.selected_tower_id.explode_radius_max) + " ft. impact";
                    next_level_string = "Next Level: " + string(global.selected_tower_id.explode_radius_max + cur_upgrade.upgrade_amount) + " ft. impact";
                    description = "Description: Increases the maximum size of rocks that are thrown. Larger rocks deal more damage and stun for longer.";
                    break;
                    
            }
    
            //store in obj_upgrade_description because the depth is too low in this object 
            if (!upgrade_description_created) { //make sure to make it true after not hovering
            
                
            
                my_upgrade_description = instance_create(mouse_x,mouse_y,obj_upgrade_description);
                
                my_upgrade_description.title_string = title_string;
                my_upgrade_description.cur_level_string = cur_level_string;
                my_upgrade_description.next_level_string = next_level_string;
                my_upgrade_description.description = description;
                
                my_upgrade_description.draw_upgrade_description_width = draw_upgrade_description_width;
                
                my_upgrade_description.can_calculate_lines = true; //go ahead and run the script now
                
                my_upgrade_description.can_draw = true; //used to avoid variable initialization errors
                upgrade_description_created = true; //used to negate creating more of these objects
            }
                
                
            if (global.gold &gt;= cur_upgrade.my_upgrade_cost) {
                
                //draw obj_buy sprite on top of the cursor and upgrade sprite
                if (create_obj_buy){
                    my_obj_buy = instance_create(mouse_x,mouse_y - 16,obj_buy);
                    create_obj_buy = false;
                }
                
                
                   
                if (mouse_check_button_pressed(mb_left)) {
                    
                    //draws the upgrade float object above this amount:
                    var above_mouse = 32;
                    
                    //upgraaaaddeeessss---------------------------------------------------------------------
                    switch (cur_upgrade.upgrade_type) {
                        
                        case swords:
                            global.selected_tower_id.tower_damage += cur_upgrade.upgrade_amount;
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.damage_upgrade_amount;
                            global.selected_tower_id.damage_upgrade_amount += j*0.25;
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = swords;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                            global.selected_tower_id.damage_iterations++;
                            break;
                            
                        
                        case longbow:
                            global.selected_tower_id.tower_cur_range += cur_upgrade.upgrade_amount;
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.range_upgrade_amount;
                            global.selected_tower_id.range_upgrade_amount = round(j*0.95); //make this constant, not increasing
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = longbow;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;   
                            global.selected_tower_id.range_iterations++;
                            break;
                            
                            
                        case feather:
                            //special exception limits it from reducing it lower than zero:
                            if (global.selected_tower_id.rate_of_fire &gt; global.selected_tower_id.rate_of_fire - cur_upgrade.upgrade_amount){
                                global.selected_tower_id.rate_of_fire -= cur_upgrade.upgrade_amount;
                                //raise the effectiveness next time:
                                var j = global.selected_tower_id.speed_upgrade_amount;
                                global.selected_tower_id.speed_upgrade_amount = round(j - j*0.20);
                                var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                                my_float.type = feather;
                                my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                                global.selected_tower_id.speed_iterations++;
                            } //special exception limits it from reducing it lower than zero:
                            break;
                            
                            
                        case oil:
                            global.selected_tower_id.oil_duration += cur_upgrade.upgrade_amount;
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.oil_upgrade_amount;
                            //global.selected_tower_id.oil_upgrade_amount += j; //make this one constant, not increasing each time
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = oil;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                            global.selected_tower_id.oil_iterations++;
                            break;
                            
                            
                        case fire_upgrade:
                            global.selected_tower_id.fire_size += cur_upgrade.upgrade_amount;
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.fire_upgrade_amount;
                            global.selected_tower_id.fire_upgrade_amount += j*0.25;
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = fire_upgrade;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                            global.selected_tower_id.fire_iterations++;
                            break;
                            
                        case rock_min_upgrade:
                            global.selected_tower_id.explode_radius_min += cur_upgrade.upgrade_amount;
                            
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.explode_radius_min
                                                                                //ease into the max
                            global.selected_tower_id.rock_min_upgrade_amount = ease(j, global.selected_tower_id.explode_radius_max, 0.2) - j;
                            
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = rock_min_upgrade;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                            global.selected_tower_id.rock_min_iterations++;
                            break;
                            
                        case rock_max_upgrade:
                            global.selected_tower_id.explode_radius_max += cur_upgrade.upgrade_amount;
                            
                            //raise the effectiveness next time:
                            var j = global.selected_tower_id.rock_max_upgrade_amount;
                            global.selected_tower_id.rock_max_upgrade_amount += j*0.75;
                            
                            var my_float = instance_create(mouse_x, mouse_y - above_mouse, obj_upgrade_float);
                            my_float.type = rock_max_upgrade;
                            my_float.upgrade_amount = cur_upgrade.upgrade_amount;
                            global.selected_tower_id.rock_max_iterations++;
                            break;
                    }
    
                    
                    
                    switch (global.selected_tower_id.tower_type) {
                    //make ALL upgrades more expensive after ANY purchase:
                    
                        case tower_normal:
                            //damage
                            var i = global.selected_tower_id.damage_upgrade_cost;
                            global.selected_tower_id.damage_upgrade_cost = round(i + i*0.5);
                            
                            //range
                            var i = global.selected_tower_id.range_upgrade_cost;
                            global.selected_tower_id.range_upgrade_cost = round(i + i*0.25);
                                    
                            //speed
                            var i = global.selected_tower_id.speed_upgrade_cost;
                            global.selected_tower_id.speed_upgrade_cost = round(i + i*0.35);
                            break;
                            
                            
                        case tower_rock:
                            //rock_min_upgrade_cost
                            var i = global.selected_tower_id.rock_min_upgrade_cost;
                            global.selected_tower_id.rock_min_upgrade_cost = round(i + i*0.5);
                            
                            //rock_max_upgrade_cost
                            var i = global.selected_tower_id.rock_max_upgrade_cost;
                            global.selected_tower_id.rock_max_upgrade_cost = round(i + i*0.5);
                            break;
                            
                        case tower_oil:
                            //oil
                            var i = global.selected_tower_id.oil_upgrade_cost;
                            global.selected_tower_id.oil_upgrade_cost = round(i + i*0.5);
    
                            //fire size
                            var i = global.selected_tower_id.fire_upgrade_cost;
                            global.selected_tower_id.fire_upgrade_cost = round(i + i*0.5);
                            break;
    
                    }
                    
                    //increase the sell value:
                    global.selected_tower_id.sell_amount = round(global.selected_tower_id.sell_amount*1.5);
                    
                    //subtract the gold from my account:
                    global.gold -= cur_upgrade.my_upgrade_cost;
                    
                    //iterate the TOTAL amount of upgrades on this tower:
                    global.selected_tower_id.total_upgrade_count++
                    
                    //update our description object:
                    upgrade_description_created = false;
                    with (my_upgrade_description) instance_destroy();
                    
                }
            
            }
        
        } 
        else { //if NOT hovering over any upgrade object
            create_obj_buy = true;
            if (instance_exists(obj_buy)){
                with (my_obj_buy) instance_destroy();
    
            }
            upgrade_description_created = false;
            with (my_upgrade_description) instance_destroy();
        }
        
    } 
    
} else {
    cur_alpha2 = ease(cur_alpha2, cur_alpha, 0.05)
    create_sell_icon = true; 
}
    





//click-for-info logic:
//LATER MAKE IT THE PARENT OBJECT, NOT OBJ TOWER!!!! (Otherwise this will only work with the red tower). 
with (obj_tower_parent) {
    if ( (place_meeting(x, y, obj_mouse_tip)) &amp;&amp; (mouse_check_button_pressed(mb_left)) &amp;&amp; (!con_room.place_tower)) &amp;&amp; (!global.hover_over_upgrade){
                                            //not sure if local_tower_id will work here since it's not a variable that con_room holds?
        global.selected_tower_id = con_room.tower_id[local_tower_id]; //stores the pointer to the tower into the global selected pointer. 
        con_UI.first_selected_tower = true; //forevermore true (there will always be a tower displayed.)
    }
}


if (first_selected_tower){ //needed because the info will be blank in the beginning. 
    with (global.selected_tower_id){
    //update every step in case user upgrades:
            global.selected_tower_name = tower_name;
            global.selected_tower_range = tower_cur_range;
            global.selected_tower_rate_of_fire = rate_of_fire;
            global.selected_tower_damage = tower_damage;
            global.selected_tower_sell_amount = sell_amount;
            global.selected_tower_nickname = tower_nickname;
    }
}



draw_set_alpha(cur_alpha);






//bar purchase tower---------------------------------------------------------------------------------------------------------
draw_rectangle_colour(bar_inner_x1, bar_purchase_tower_y1, bar_inner_x2, bar_purchase_tower_y2, c_black, c_black, c_black, c_black, false);
//see create event for the tower_UI objects!








//bag of gold and gold amount-----------------------------------------------------------
draw_set_font(ft_gold);

target_gold_amount = ease(target_gold_amount, global.gold, 0.05);

var my_string = "Stone: " + string(round(target_gold_amount));
var gold_and_health_x = bar_outer_x1 - square_unit*2 - (string_width(my_string)/2)  - square_unit;
var gold_and_health_x = 0 + square_unit;
draw_sprite_ext(spr_rocks, image_index, gold_and_health_x, bar_title_y1 + square_unit/2, 0.5, 0.5, 0, c_white, 1);




//first draw black BG, then the yellow string: 
//var gold_heart_string_x = bar_outer_x1 - square_unit*3 - (string_width(my_string)/2)
var gold_heart_string_x = gold_and_health_x + square_unit;
draw_text_color(gold_heart_string_x + 2 , bar_title_y1 + 2, my_string, c_black, c_black, c_black, c_black, 1);

fade_praise_string = ease(fade_praise_string, draw_gold_praise_alpha_set, 0.1);

if (draw_gold_praise) {

    s_outline_string(gold_heart_string_x, bar_title_y1, my_string, c_black, fade_praise_string - 0.4, 4);
    s_outline_string(gold_heart_string_x, bar_title_y1, my_string, c_yellow, fade_praise_string - 0.4, 3);

    s_outline_string(gold_heart_string_x, bar_title_y1, my_string, c_white, fade_praise_string - 0.4, 2);
    s_outline_string(gold_heart_string_x, bar_title_y1, my_string, c_black, fade_praise_string - 0.4, 1);

}
    
draw_text_color( gold_heart_string_x, bar_title_y1, my_string, c_ltgray, c_ltgray, c_ltgray, c_ltgray, 1);





//drawing the heart on the UI:
var color_string = c_red;
if (obj_home.draw_home_healthbar) {
    image_speed = 0.4;
    color_string = c_white;
    
}
else {
    image_speed = 0;
    image_index = 0;
    color_string = c_red;
}

draw_sprite_ext(spr_heart_white, image_index, gold_and_health_x, bar_title_y1 + square_unit*1.75, 0.25, 0.25, 0, color_string, 1);
//showing the health amount in text form:
var my_home_string = "Health: " + string(global.home_health) + "/" + string(global.home_max_health);
draw_text_color(gold_heart_string_x + 2 , bar_title_y1 + square_unit + 2, my_home_string, c_black, c_black, c_black, c_black, 1);
draw_text_color( gold_heart_string_x, bar_title_y1 + square_unit, my_home_string, color_string, color_string, color_string, color_string, 1);


//reset stuff
draw_set_alpha(1);
draw_set_color(c_black);
draw_set_font(ft_UI);


//draw speed bar
var bar_unit_y = 16;
var bar_unit_x = 16;

draw_rectangle( bar_unit_x, room_height - bar_unit_y*4 , bar_unit_x*14, room_height - bar_unit_y, false);

if (draw_speed_buttons) {
    
    //THIS MUST BE CREATED FIRST, THEN THE BUTTONS! (initialization reasons)
    global.speed_selected_mask = instance_create(bar_unit_x*9, room_height - bar_unit_y*2.5, obj_speed_selected);
    
    fast_button = instance_create(bar_unit_x*3, room_height - bar_unit_y*2.5, obj_speed_button);
    fast_button.speed_button_type = button_pause;

    slow_button = instance_create(bar_unit_x*6, room_height - bar_unit_y*2.5, obj_speed_button);
    slow_button.speed_button_type = button_slow;
    
    normal_button = instance_create(bar_unit_x*9, room_height - bar_unit_y*2.5, obj_speed_button);
    normal_button.speed_button_type = button_normal;
    
    fast_button = instance_create(bar_unit_x*12, room_height - bar_unit_y*2.5, obj_speed_button);
    fast_button.speed_button_type = button_fast;
    
    
    draw_speed_buttons = false;
}


//draw countdown bar

//ease the alpha in and out
countdown_alpha = ease(countdown_alpha, countdown_check_alpha, 0.1);

if (global.countdown &gt; 0) {

    countdown_check_alpha = 1;
    
    draw_set_font(ft_countdown);
    if (global.countdown &lt; 60*6) { //draw white if less than 5 seconds

        switch ( round(global.countdown/60) mod 2) {
             
            case 0: //if even, yellow
                countdown_color = c_yellow;
                break;
                
            case 1: //if odd, white
                countdown_color = c_white;
                break;
        }
    }
    else {
        countdown_color = c_yellow
    }
    
    draw_text_colour(bar_inner_x1/2.25 + 2, 32 + 2, "Time Until Attack: " + string(round(global.countdown/60)), c_black, c_black, c_black, c_black,  countdown_alpha);
    draw_text_colour(bar_inner_x1/2.25, 32, "Time Until Attack: " + string(round(global.countdown/60)), countdown_color, countdown_color, countdown_color, countdown_color, countdown_alpha);
        
}
else countdown_check_alpha = 0;



if (global.draw_paused_string) {

    draw_set_font(ft_countdown);
    var paused_string = "Game Paused";
    
    draw_text_colour(bar_outer_x1/2 - string_width(paused_string)/2 + 2, room_height/2 - string_height(paused_string)/2 + 2, paused_string, c_black, c_black, c_black, c_black,  1);
    draw_text_colour(bar_outer_x1/2 - string_width(paused_string)/2, room_height/2 - string_height(paused_string)/2, paused_string, c_orange, c_orange, c_orange, c_orange,  1);
    

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
