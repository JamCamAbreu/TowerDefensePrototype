<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hut_UI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_illegal_placement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_direction = face_right;
alarm[0] = choose(180, 120, 60);

spawn_hero_x = 0; //changed later
spawn_hero_y = 0; //changed later
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    //LATER ORGANIZE THIS BY WAVES INSTEAD OF MAX ENEMIES ON SCREEN
    //use a script. A script will hold the enemy types, and the arguments passed in will be how many of each enemy type?
    //OR a scripts argument could be WHICH WAVE FILE to read. The wave file contains that information. 
    
//condition to check before creating a hero
//if (global.map_total_enemies_screen &lt; max_enemies) {
    
//insert code for checking which direction to spawn the hero:
    
if (!global.freeze) {    

    var bump = 16 + choose(0,4,8);
    var bump2 = choose(-16,-8,-4,0,4,8,16)
    switch (my_direction) {
    
        case face_right: 
            spawn_hero_x = x + (sprite_width/2) + bump
            spawn_hero_y = y + bump2
            break;
            
        case face_down: 
            spawn_hero_x = x + bump2
            spawn_hero_y = y + (sprite_height/2) + bump
            break;
            
        case face_left: 
            spawn_hero_x = x - (sprite_width/2) - bump
            spawn_hero_y = y + bump2
            break;
            
        case face_up: 
            spawn_hero_x = x + bump2
            spawn_hero_y = y - (sprite_height/2) + bump
            break;
    }


    
    //Create hero
    cur_instance = instance_create(spawn_hero_x, spawn_hero_y, obj_barracks_unit);
    //cur_instance.my_health = cur_instance.max_health; //set the units health to be full
    //cur_instance.my_health = cur_instance.max_health;
    
    //make a global variable in con_room and inact the following code if I need to store the id:
    //cur_instance.my_local_id = global.hero_counter;
    
    
    //ID storage and stuff!!!!
    /*
    global.enemy_id[global.map_cur_enemy] = cur_instance.id;
    cur_instance.local_id = global.map_cur_enemy; //could be useful to have a local id as well. 
    
    global.enemy_id_exists[global.map_cur_enemy] = true; //the flag array for each enemy existing is set to true. (set to false on death). 
    
    global.map_cur_enemy++; //next enemy will be my_id + 1; 
    global.map_total_enemies_screen++; //total enemies on the screen now. 
    */
    
    
//}

}


//reset alarm
var max_time = 200;
var invert_time = max_time - (global.time_sec/2);
var spawner_timer = max(invert_time, 10) + choose(12, 8, 5, 2);

alarm[0] = spawner_timer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(spr_hut,my_direction,x,y,1,1,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
