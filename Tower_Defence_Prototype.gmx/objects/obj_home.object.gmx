<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_castle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_illegal_placement</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0, con_room);

home_health_timer = 50;
draw_home_healthbar = false;
draw_home_healthbar_alpha = 1;
my_color = c_white;

start_fade = false;
start_fade_timer = home_health_timer/3
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_fade = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_color = c_white;
draw_home_healthbar = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(spr_castle,image_index, x,y,1,1,0,my_color,1);


//only draw healthbar after taking damage:
if (draw_home_healthbar){

    //healthbar
    var health_perc = global.home_health/global.home_max_health; //our percentage of health used for scaling
    
    var healthbar_size_x = 128; //actual width of the health bar. 
    var healthbar_scale = round(healthbar_size_x*health_perc); //scales the bar to the correct size
    
    var healthbar_size_y = 24; //actual height of the health bar
    var healthbar_center = x - (healthbar_size_x/2); //center the bar above the monsters head
    
    var above_head = 20;
    
    //my health bar
    
    draw_set_alpha(draw_home_healthbar_alpha);
    
    //red
    draw_set_alpha(draw_home_healthbar_alpha - 0.4);
    draw_rectangle_colour(healthbar_center, y - above_head, healthbar_center + healthbar_size_x, y - above_head - healthbar_size_y, c_red, c_red, c_red, c_red, false);
    
    //green
    draw_set_alpha(draw_home_healthbar_alpha - 0.2);
    draw_rectangle_colour(healthbar_center, y - above_head, healthbar_center + healthbar_scale, y - above_head - healthbar_size_y, c_green, c_green, c_green, c_green, false);
    
    //outline
    draw_set_alpha(draw_home_healthbar_alpha);
    draw_rectangle(healthbar_center, y - above_head, healthbar_center + healthbar_size_x, y - above_head - healthbar_size_y, true); // outline

    if (start_fade) draw_home_healthbar_alpha -= (1/ (home_health_timer - start_fade_timer) );  
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
