<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-150</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>upgrade_type = feather;
my_upgrade_cost = 2000;

my_mask = instance_create(x,y,obj_upgrade_mask);
my_mask.my_upgrade_id = id;

//need an alarm because it needs to happen AFTER the create event
alarm[0] = 2; //initializes variables in my_mask

my_color = c_white;

iterations = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (my_mask) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//this needs to be an alarm because it needs to happen AFTER the create event
my_mask.upgrade_type = upgrade_type;
my_mask.my_upgrade_cost = my_upgrade_cost;
my_mask.upgrade_amount = upgrade_amount;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = ease(x, target_x, 0.1);
y = ease(y, target_y, 0.1);

my_mask.x = x;
my_mask.y = y;

my_mask.upgrade_amount = upgrade_amount;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//my_color = c_white;

switch (upgrade_type) {

    case feather: 
        my_image = asset_get_index("spr_feather");
        break;
        
    case longbow: 
        my_image = asset_get_index("spr_longbow");
        break;
        
    case swords: 
        my_image = asset_get_index("spr_swords");
        break;
        
    case oil:
        my_image = asset_get_index("spr_oil");
        break;
        
    case fire_upgrade:
        my_image = asset_get_index("spr_fire_upgrade");
        break;
        
    case rock_min_upgrade:
        my_image = asset_get_index("spr_rock_min_upgrade");
        break;
        
    case rock_max_upgrade:
        my_image = asset_get_index("spr_rock_max_upgrade");
        break;
    
    
}


//if we have enough money for the upgrade or not: 
if (global.gold &gt;= my_upgrade_cost) red_or_green = asset_get_index("spr_upgrade_canbuy");
else red_or_green = asset_get_index("spr_upgrade_cannotbuy");

//draw the type of upgrade
draw_sprite_ext(red_or_green, image_index, x,y,1,1,0, c_white, 0.8);

draw_sprite_ext(my_image, image_index, x, y, 1, 1, 0, my_color, 0.8);

//logic to space out the cost string: (I am so smart)
var spaces;
if (my_upgrade_cost &lt; 10) spaces = "   ";
else if ( (my_upgrade_cost &gt; 9) &amp;&amp; (my_upgrade_cost &lt; 100) ) spaces = "  ";
else if ( (my_upgrade_cost &gt; 99) &amp;&amp; (my_upgrade_cost &lt; 1000) ) spaces = " ";
else spaces = "";

//draw the cost of the upgrade:
draw_set_font(ft_gold_supersmall);
var my_color2 = c_white;
draw_text_colour(x + 1, y + sprite_get_height(red_or_green)/8 + 1, string(spaces) + string(my_upgrade_cost), c_black, c_black, c_black, c_black, 1);
draw_text_colour(x, y + sprite_get_height(red_or_green)/8, string(spaces) + string(my_upgrade_cost), my_color2, my_color2, my_color2, my_color2, 1);

//THIS MUST BE STORED IN THE TOWER!!! OTHERWISE IT WILL BE LOST...
var iterations_y1 = y  - sprite_get_height(red_or_green)*0.7 - 1
draw_rectangle_colour(x - 32 - 2, iterations_y1, x - 32 + string_width(string(iterations)) + 2, iterations_y1 + string_height(string(iterations)), c_black, c_black, c_black, c_black, false);
draw_text_colour(x - 32 + 1, iterations_y1 + 1 , string(iterations), c_black, c_black, c_black, c_black, 1);
draw_text_colour(x - 32, iterations_y1, string(iterations), my_color2, my_color2, my_color2, my_color2, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
