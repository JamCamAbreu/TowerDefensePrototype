<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-225</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//my_spawner    //this variable is given to this object upon creation
                //it is the id of the spawner object that makes this waves controller
                
var sec = 60;

//initialize
group0_location = spawner_0;
group1_location = spawner_0;
group2_location = spawner_0;
group3_location = spawner_0;

switch (global.level) {
    
    //LEVEL 1-----------------------------------------------------------------------------
    case 1:              
        

        
        //these switches determine the wave that we are on
        switch (global.wave) {
        
            //wave 1:
            case 1: 
            
                //level starting gold
                global.gold = 220; 
            
                global.how_many_groups_left = 1; 
                global.countdown = sec*18;
                
                tip = "...Here they come! ";
                tip2 = "we must construct defenses!";
                
                //group 0
                group0_size = 5;
                group0_frequency = sec*1.5;
                group0_enemy = weak;
                alarm[0] = sec*16;
                
                break;
        
            //wave 2
            case 2: 
            
                global.how_many_groups_left = 2;
                global.countdown = sec*12;
                tip = "Our scouts have reported fast units!";
                tip2 = "Don't let them sneak past our defences!";
                
                //group0 
                group0_size = 8;
                group0_frequency = sec*2;
                group0_enemy = weak;
                alarm[0] = sec*10;
                
                //group1 
                group1_size = 6;
                group1_frequency = sec*3;
                group1_enemy = normal_fast;
                alarm[1] = sec*13;
                break;
                
            //wave 3
            case 3: 
            
                global.how_many_groups_left = 1;
                global.countdown = sec*14;
                tip = "Careful about units that are";
                tip2 = "clustered together, sire.";
                
                //group0 
                group0_size = 10;
                group0_frequency = sec*0.75;
                group0_enemy = normal_fast;
                alarm[0] = sec*12;
                
                break;
                
            //wave 4
            case 4: 
            
                global.how_many_groups_left = 2;
                global.countdown = sec*14;
                
                tip = "Large enemies approaching!";
                tip2 = "";
                
                //group0 
                group0_size = 10;
                group0_frequency = sec*1.5;
                group0_enemy = weak;
                alarm[0] = sec*12;
                
                //group1
                group1_size = 4;
                group1_frequency = sec*4;
                group1_enemy = normal_big;
                alarm[1] = sec*17;
                
                break;
                
            //wave 5
            case 5: 
            
                global.how_many_groups_left = 3;
                global.countdown = sec*10;
                
                tip = "";
                tip2 = "";
                
                //group0 
                group0_size = 10;
                group0_frequency = sec*2;
                group0_enemy = normal;
                alarm[0] = sec*8;
                
                //group1
                group1_size = 2;
                group1_frequency = sec*0.25;
                group1_enemy = normal_big;
                alarm[1] = sec*10;
                
                //group2
                group2_size = 2;
                group2_frequency = sec*0.25;
                group2_enemy = normal_big;
                alarm[2] = sec*15;
                
                break;
                
            //wave 6
            case 6: 
            
                global.how_many_groups_left = 3;
                global.countdown = sec*16;
                
                tip = "Various enemies of many types!";
                tip2 = "To the walls, archers!";
                
                //group0 
                group0_size = 8;
                group0_frequency = sec*2;
                group0_enemy = normal_fast;
                alarm[0] = sec*14;
                
                //group1
                group1_size = 14;
                group1_frequency = sec*1.25;
                group1_enemy = weak;
                alarm[1] = sec*16;
                
                //group2
                group2_size = 6;
                group2_frequency = sec*3;
                group2_enemy = normal_big;
                alarm[2] = sec*18;
                
                break;
                
            //wave 7
            case 7: 
            
                global.how_many_groups_left = 2;
                global.countdown = sec*12;
                
                tip = "Green glowing enemies?";
                tip2 = "Why are they green?";
                
                //group0 
                group0_size = 4;
                group0_frequency = sec*0.5;
                group0_enemy = normal_regen;
                alarm[0] = sec*10;
                
                //group1
                group1_size = 7;
                group1_frequency = sec*0.65;
                group1_enemy = normal_regen;
                alarm[1] = sec*18;
                
                break;
                
            //wave 8
            case 8: 
            
                global.how_many_groups_left = 4;
                global.countdown = sec*17;
                
                tip = "Last of the enemies, sire!";
                tip2 = "Hold them off! Protect our Kingdom!";
                
                //group0 
                group0_size = 13;
                group0_frequency = sec*1.5;
                group0_enemy = normal_regen;
                alarm[0] = sec*11;
                
                //group1
                group1_size = 16;
                group1_frequency = sec*1;
                group1_enemy = weak;
                alarm[1] = sec*10;
                
                //group2
                group2_size = 15;
                group2_frequency = sec*0.5;
                group2_enemy = normal_fast;
                alarm[2] = sec*15;
                
                //group3
                group3_size = 2;
                group3_frequency = sec*3.5;
                group3_enemy = normal_big;
                alarm[3] = sec*16;
                
                break;
                
            default:
                global.how_many_groups_left = 1;
                
                tip = "error...forgot to put in win condition."
                tip2 = 'Press "R" to restart the level. Sorry :)'
        }
        
        //put the amount of waves here:
        global.level_win_condition = 8;
        
        break; //end of level break (KEEP THIS)

        
        
        
        
        
    //LEVEL 2-----------------------------------------------------------------------------
    case 2:      
    
        //these switches determine the wave that we are on
        switch (global.wave) {
        
            //wave 1:
            case 1: 
            
                //level starting gold
                global.gold = 340; 
            
                global.how_many_groups_left = 1; 
                tip = "We have made it to the next kingdom";
                tip2 = "Let's show these invaders how we defend!";
                
                //group 0
                group0_size = 5;
                group0_frequency = 100;
                group0_enemy = normal;
                group0_location = spawner_1;
                alarm[0] = 200;
                
                //group1
                group1_size = 4;
                group1_frequency = sec*1;
                group1_enemy = weak;
                group1_location = spawner_0;
                alarm[1] = sec*4;
                
                break;
        
            //wave 2
            case 2: 
                
                global.how_many_groups_left = 1; 
                tip = "Our spies report enemy upgrades";
                tip2 = "Armor makes them tougher! Careful!";
                
                //group 0
                group0_size = 6;
                group0_frequency = 100;
                group0_enemy = normal_armored;
                alarm[0] = 200;
                
                break;
                
            
            
            //wave 3
            case 3: 
                
                global.how_many_groups_left = 2; 
                tip = "It's horrible to behold, sire";
                tip2 = "Sheild your eyes!";
                
                //group 0
                group0_size = 35;
                group0_frequency = sec*1;
                group0_enemy = carson_monster;
                alarm[0] = 200;
                
                //group 1
                group1_size = 2;
                group1_frequency = sec*0.2;
                group1_enemy = normal_big;
                alarm[1] = sec*8;
                
                break;
            

                
            //default wave
            default:
                global.how_many_groups_left = 1;
                
                tip = "error...forgot to put in win condition."
                tip2 = 'Press "R" to restart the level. Sorry :)'
                
        }

        //put the amount of waves here:
        global.level_win_condition = 3;
        break; //end of level break (KEEP THIS)
        



    //LEVEL 3-----------------------------------------------------------------------------
    case 3:      
    
        //these switches determine the wave that we are on
        switch (global.wave) {
        
            //wave 1:
            case 1: 
            
                global.countdown = sec*3;
            
                global.how_many_groups_left = 2; 
                tip = "Now we are on level 3!";
                tip2 = "Let's construct towers!";
                
                //group 0
                group0_size = 5;
                group0_frequency = 100;
                group0_enemy = normal;
                group0_location = spawner_1;
                alarm[0] = 200;
                
                //group1
                group1_size = 4;
                group1_frequency = sec*1;
                group1_enemy = weak;
                group1_location = spawner_0;
                alarm[1] = sec*4;
                
                break;
        
            //wave 2
            case 2: 
            
                break;

                
            //default wave
            default:
                global.how_many_groups_left = 1;
                
                tip = "error...forgot to put in win condition."
                tip2 = 'Press "R" to restart the level. Sorry :)'
                
        }
        
        //put the amount of waves here:
        global.level_win_condition = 3;
        break; //end of level break (KEEP THIS)
        
        
        
        
    //LEVEL 4-----------------------------------------------------------------------------
    case 4:      
    
        //these switches determine the wave that we are on
        switch (global.wave) {
        
            //wave 1:
            case 1: 
            
                global.countdown = sec*3;
            
                global.how_many_groups_left = 2; 
                tip = "Now we are on level 4!";
                tip2 = "Let's construct towers!";
                
                //group 0
                group0_size = 5;
                group0_frequency = 100;
                group0_enemy = normal;
                group0_location = spawner_1;
                alarm[0] = 200;
                
                //group1
                group1_size = 4;
                group1_frequency = sec*1;
                group1_enemy = weak;
                group1_location = spawner_0;
                alarm[1] = sec*4;
                
                break;
        
            //wave 2
            case 2: 
            
                break;

                
            //default wave
            default:
                global.how_many_groups_left = 1;
                
                tip = "error...forgot to put in win condition."
                tip2 = 'Press "R" to restart the level. Sorry :)'
                
        }
        
        //put the amount of waves here:
        global.level_win_condition = 3;
        break; //end of level break (KEEP THIS)
        
        
        



    //LEVEL 5-----------------------------------------------------------------------------
    case 5:      
    
        //these switches determine the wave that we are on
        switch (global.wave) {
        
            //wave 1:
            case 1: 
            
                global.countdown = sec*3;
            
                global.how_many_groups_left = 2; 
                tip = "Now we are on level 5!";
                tip2 = "Let's construct towers!";
                
                //group 0
                group0_size = 5;
                group0_frequency = 100;
                group0_enemy = normal;
                group0_location = spawner_1;
                alarm[0] = 200;
                
                //group1
                group1_size = 4;
                group1_frequency = sec*1;
                group1_enemy = weak;
                group1_location = spawner_0;
                alarm[1] = sec*4;
                
                break;

                
            //default wave
            default:
                global.how_many_groups_left = 1;
                
                tip = "error...forgot to put in win condition."
                tip2 = 'Press "R" to restart the level. Sorry :)'
                
        }
        
        //put the amount of waves here:
        global.level_win_condition = 3;
        break; //end of level break (KEEP THIS)

        

    default: //default for level switch
        break;
}
    
    
    
    
    
next_wave_alarm = 100; //each unit sent will add to the timer?
wave_delay_time = 30; //CHANGE LATER
set_timer = true;


//for announcing to the user the wave number:
my_alpha = 0;
draw_wave = true;
draw_wave_timer_max = 240;
draw_wave_timer = draw_wave_timer_max;
draw_wave_color = c_yellow;
draw_tip_color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//group 3 instructions:

//unless the screen is frozen:
if (!global.freeze) {

    var spawn_location_x;
    var spawn_location_y;
    
    switch (group3_location) {
    
        case spawner_0:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            break;
            
        case spawner_1:
            spawn_location_x = obj_spawner_1.x;
            spawn_location_y = obj_spawner_1.y;
            break;
    
        default:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            
    }

    //spawn the correct enemy unit
    s_enemy_spawn(spawn_location_x, spawn_location_y, group3_enemy)
    
    //global.wave = 40;  //testing purposes
    
    if (group3_size &gt; 0) {
        group3_size--;
        alarm[3] = group3_frequency; 
        }
    else {
        global.how_many_groups_left--;
    }

} else alarm[0] = group3_frequency; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//group 2 instructions:

//unless the screen is frozen:
if (!global.freeze) {

    var spawn_location_x;
    var spawn_location_y;
    
    switch (group2_location) {
    
        case spawner_0:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            break;
            
        case spawner_1:
            spawn_location_x = obj_spawner_1.x;
            spawn_location_y = obj_spawner_1.y;
            break;
    
        default:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            
    }

    //spawn the correct enemy unit
    s_enemy_spawn(spawn_location_x, spawn_location_y, group2_enemy)
    
    //global.wave = 40;  //testing purposes
    
    if (group2_size &gt; 0) {
        group2_size--;
        alarm[2] = group2_frequency; 
        }
    else {
        global.how_many_groups_left--;
    }
    
} else alarm[0] = group2_frequency; 
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//group 1 instructions:

//unless the screen is frozen:
if (!global.freeze) {


    var spawn_location_x;
    var spawn_location_y;
    
    switch (group1_location) {
    
        case spawner_0:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            break;
            
        case spawner_1:
            spawn_location_x = obj_spawner_1.x;
            spawn_location_y = obj_spawner_1.y;
            break;
    
        default:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            
    }

    


    //spawn the correct enemy unit
    s_enemy_spawn(spawn_location_x, spawn_location_y, group1_enemy)
    
    //global.wave = 40;  //testing purposes
    
    if (group1_size &gt; 0) {
        group1_size--;
        alarm[1] = group1_frequency; 
        }
    else {
        global.how_many_groups_left--;
    }

} else alarm[0] = group1_frequency; 
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//group 0 instructions:

//unless the screen is frozen:
if (!global.freeze) {
    

    var spawn_location_x;
    var spawn_location_y;
    
    switch (group0_location) {
    
        case spawner_0:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            break;
            
        case spawner_1:
            spawn_location_x = obj_spawner_1.x;
            spawn_location_y = obj_spawner_1.y;
            break;
    
        default:
            spawn_location_x = obj_spawner.x;
            spawn_location_y = obj_spawner.y;
            
    }

    

    //spawn the correct enemy unit
    s_enemy_spawn(spawn_location_x, spawn_location_y , group0_enemy)
    
    
    //add a chance to find a treasure monster!
    var treasure_spawner_roll = global.treasure_chance + min(global.wave*4, 40) + irandom(50);
    if (treasure_spawner_roll &gt; 100) {
        my_treasure_enemy = s_enemy_spawn(obj_spawner.x, obj_spawner.y, treasure_monster);
        my_treasure_enemy.create_indicator = true;
        my_treasure_enemy.is_treasure_enemy = true;
        global.treasure_chance = 0;
    }
    else global.treasure_chance++
    
    
    //group finished:
    if (group0_size &gt; 0) {
        group0_size--;
        alarm[0] = group0_frequency; 
        }
    else {
        global.how_many_groups_left--;
    }

} else alarm[0] = group0_frequency; 
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


//if all of the waves have been sent:
if (global.how_many_groups_left == 0) &amp;&amp; (global.map_total_enemies_screen == 0) {

    if (set_timer) {
        next_wave_alarm = wave_delay_time;
        set_timer = false;
    }


    if (next_wave_alarm &gt; 0) next_wave_alarm--;
    else {
        if (global.wave &lt; global.level_win_condition) {
            global.wave++;
            global.create_waves_controller = true;
            
            my_spawner.wave_delay = true;
            instance_destroy();
        }
        
        //no more waves on the current level:
        else {
        instance_create(room_width/2,room_height,obj_level_win);
        
        
        global.freeze = true;
        global.level_end_timer = (get_timer()/1000000) - global.level_begin_timer - global.paused_time_total; //get the current time so that we can subtract that time to reset our rooms timer
        con_room.level_win_set = true;
        instance_destroy(); //needed so a million level win objects don't spawn. 
            
        }
    }
}



//OLD

/*


max_health = 
my_move_speed = 
my_sprite = 
sprite_scale = 
my_color = 
my_damage = 
move_distance = 


if (activate){ // allows this to be called like a script almost
    
    //level 1
    if (room = asset_get_index(rm_level_1)){
    
    //wave_1
        if (wave == 1) {
            max_groups = 1;
            
            //group1 - normal weak
            if (group == 1) {
            
                group_size = 6;
                frequency_alarm = 60;
                delay_alarm = 0;
                
    cur_instance = spawner(obj_enemy);
    cur_instance.my_health = cur_instance.max_health; //set the units health to be full
    
    
    //ID storage and stuff!!!!
    global.enemy_id[global.map_cur_enemy] = cur_instance.id;
    cur_instance.local_id = global.map_cur_enemy; //could be useful to have a local id as well. 
    
    global.enemy_id_exists[global.map_cur_enemy] = true; //the flag array for each enemy existing is set to true. (set to false on death). 
    
    global.map_cur_enemy++; //next enemy will be my_id + 1; 
    global.map_total_enemies_screen++; //total enemies on the screen now. 
                
                max_health = 50;
                my_move_speed = 25;
                my_sprite = spr_dude;
                sprite_scale = 1;
                my_color = c_white;
                my_damage = 10;
                move_distance = 25;
            }
        }//end of wave 1
    
        
        //wave_2
        if (wave == 2) {
            max_groups = 2;
            
            //group1 - normal weak
            if (group == 1) {
            
                group_size = 6;
                frequency_alarm = 60;
                delay_alarm = 0;
            
                max_health = 50;
                my_move_speed = 25;
                my_sprite = spr_dude;
                sprite_scale = 1;
                my_color = c_white;
                my_damage = 10;
                move_distance = 25;
            }
            
            //group2 - normal big
            if (group == 2) {
            
                group_size = 2;
                frequency_alarm = 180;
                delay_alarm = 120;
            
                max_health = 200;
                my_move_speed = 45;
                my_sprite = spr_dude;
                sprite_scale = 2;
                my_color = c_white;
                my_damage = 20;
                move_distance = 25;
            }
            
        }//end of wave 1
        
    }

    activate = false;
}



if (room = asset_get_index(rm_level_2)){

    
}

*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (draw_wave_timer &gt; 0) draw_wave_timer--;
else draw_wave = false;


if (draw_wave) {

    

    var draw_wave_timer_perc = 1;
    if (draw_wave_timer &lt; draw_wave_timer_max*0.35) {
        draw_wave_timer_perc = draw_wave_timer/draw_wave_timer_max;
    }
    
    my_alpha = ease(my_alpha, draw_wave_timer_perc, 0.1);
    

    //define all of the variables here:
    draw_set_font(ft_display_waves);
    var text = "Wave " + string(global.wave) + " Begins";
    var draw_under_text = string_height(text);
    
    draw_set_font(ft_display_waves_tip);
    var tip_height = string_height(tip);
    var tip_height2 = string_height(tip2);
    
    var padding = 64;
    
    draw_set_font(ft_display_waves);
    draw_set_alpha(my_alpha);
    //backdrop rectangle:
    draw_roundrect_ext(global.bar_outer_x1/2 - string_width(text)/2 - padding, room_height/3 - padding/4, global.bar_outer_x1/2 + string_width(text)/2 + padding, room_height/3 + draw_under_text + tip_height + tip_height2 + padding/2, 128, 128, false);
    
    
    //display the current wave:
    draw_set_font(ft_display_waves);
    draw_text_colour(global.bar_outer_x1/2 - string_width(text)/2 + 3, room_height/3 + 3, text , c_black, c_black, c_black, c_black,   my_alpha);
    draw_text_colour(global.bar_outer_x1/2 - string_width(text)/2, room_height/3, text , draw_wave_color, draw_wave_color, draw_wave_color, draw_wave_color,  my_alpha);
    
    
    //draw wave tip here:
    draw_set_font(ft_display_waves_tip);
    draw_text_colour(global.bar_outer_x1/2 - string_width(tip)/2 + 2, room_height/3 + draw_under_text + 2, tip , c_black, c_black, c_black, c_black, my_alpha);
    draw_text_colour(global.bar_outer_x1/2 - string_width(tip)/2, room_height/3 + draw_under_text, tip , draw_tip_color, draw_tip_color,draw_tip_color,draw_tip_color, my_alpha); 
    
    //tip2
    draw_text_colour(global.bar_outer_x1/2 - string_width(tip2)/2 + 2, room_height/3 + draw_under_text + tip_height + 2, tip2 , c_black, c_black, c_black, c_black,   my_alpha);
    draw_text_colour(global.bar_outer_x1/2 - string_width(tip2)/2, room_height/3 + draw_under_text + tip_height, tip2 , draw_tip_color,draw_tip_color,draw_tip_color,draw_tip_color,   my_alpha); 
    

    if (global.wave == 1) {
        //draw the level name here!!
    }
    
}

//reset alpha:
draw_set_alpha(1);

//debug
//draw_set_font(ft_UI);
//draw_text(mouse_x,mouse_y - 16, "How many groups left: " + string(global.how_many_groups_left));
//draw_text(mouse_x,mouse_y - 48, "group0_size : " + string(group0_size));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
